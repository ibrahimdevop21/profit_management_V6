---
import { Icon } from "astro-icon/components";
import Logo from '~/components/Logo.astro';
import LanguageSwitcher from '~/components/LanguageSwitcher.astro';
import { getHomePermalink } from '~/utils/permalinks';
import { getAsset } from '~/utils/permalinks';
import { getLangFromUrl, useTranslations } from '~/utils/i18n';

interface Link {
  text?: string;
  href?: string;
  ariaLabel?: string;
  icon?: string;
}

interface ActionLink extends Link {
  type?: string;
}

interface MenuLink extends Link {
  links?: Array<Link>;
}

export interface Props {
  links?: Array<MenuLink>;
  actions?: Array<ActionLink>;
  isSticky?: boolean;
  position?: string;
}

const {
  links = [],
  actions = [],
  isSticky = false,
  position = 'center',
} = Astro.props;

// Calculate current path to determine active links
const currentPath = new URL(Astro.request.url).pathname;

// Get current language and translations
const currentLang = getLangFromUrl(Astro.url);
const t = useTranslations(currentLang);
---

<nav 
  id="main-header"
  class="executive-nav fixed top-4 left-1/2 transform -translate-x-1/2 w-[95%] max-w-6xl z-50 rounded-xl overflow-hidden shadow-[0_4px_20px_rgba(0,0,0,0.05)] bg-white/70 backdrop-blur-md border border-[#E9D8A6]/40 transition-all duration-500 ease-in-out"
  role="navigation"
  aria-label="Profit Management Navigation"
>
  <div class="flex items-center justify-between px-6 py-3">
  <!-- Profit Management Logo -->
  <a href="/" class="flex items-center">
    <Logo class="h-8 transition-transform duration-300 hover:scale-105" />
  </a>

  <!-- Centered Desktop Navigation Links -->
  <ul class="hidden md:flex flex-1 justify-center gap-8 text-[#0D3B66] font-medium">
    {
      links.map(({ text, href }) => {
        const isActive = currentPath === href;
        return (
          <li>
            <a 
              href={href} 
              class={`nav-link transition-all duration-300 ease-in-out relative px-4 py-2 ${
                isActive 
                  ? 'text-[#0D3B66] font-semibold' 
                  : 'text-[#0D3B66] hover:text-[#C9A227]'
              }`}
            >
              {text}
            </a>
          </li>
        )
      })
    }
  </ul>

  <!-- Language Switcher -->
  <div class="hidden md:block">
    <LanguageSwitcher variant="desktop" />
  </div>

  <!-- Executive Mobile Menu Button -->
  <button 
    id="mobile-menu-button"
    class="mobile-menu-button md:hidden relative z-[110] p-3 focus:outline-none transition-all duration-300 ease-in-out border-2 border-transparent hover:border-[#C9A227] rounded-md"
    aria-label="Toggle mobile navigation menu"
    aria-expanded="false"
    aria-controls="mobile-navigation"
  >
    <div class="hamburger-container w-6 h-6 flex flex-col justify-center items-center space-y-1">
      <span class="hamburger-line block w-6 h-0.5 bg-[#0D3B66] transition-all duration-300 ease-in-out"></span>
      <span class="hamburger-line block w-6 h-0.5 bg-[#0D3B66] transition-all duration-300 ease-in-out"></span>
      <span class="hamburger-line block w-6 h-0.5 bg-[#0D3B66] transition-all duration-300 ease-in-out"></span>
    </div>
  </button>
</div>
</nav>

<!-- Executive Mobile Navigation -->
<nav
  id="mobile-navigation"
  class="mobile-nav fixed top-20 left-4 right-4 z-[100] flex flex-col justify-start pt-6 px-6 md:hidden
         bg-white/70 backdrop-blur-md border border-[#E9D8A6]/40 rounded-xl overflow-hidden shadow-[0_4px_20px_rgba(0,0,0,0.05)]
         transition-all duration-300 ease-in-out
         invisible transform -translate-y-3 opacity-0"
  role="navigation"
  aria-label="Mobile navigation menu"
  aria-hidden="true"
>
  <!-- Navigation Links -->
  <ul class="flex flex-col space-y-2 font-medium">
    {
      links.map(({ text, href }, index) => {
        const isActive = currentPath === href;
        return (
          <li class="mobile-nav-item transition-all duration-300" style={`animation-delay: ${index * 50}ms`}>
            <a 
              href={href} 
              class={`mobile-nav-link block transition-all duration-300 ease-in-out text-lg px-4 py-3 ${
                isActive 
                  ? 'text-[#0D3B66] font-semibold' 
                  : 'text-[#0D3B66] hover:text-[#C9A227]'
              }`}
              role="menuitem"
            >
              {text}
            </a>
          </li>
        );
      })
    }
  </ul>
  
  <!-- Language Switcher for Mobile -->
  <div class="mt-6 mb-6">
    <LanguageSwitcher variant="mobile" />
  </div>
</nav>

<style>
  /* Executive Header Styling with Premium Gradient */
  .executive-nav {
    background: linear-gradient(90deg, #ffffff 0%, #faedc6 50%, #ffffff 100%);
    background-size: 200% 200%;
    animation: gradientSlide 18s ease-in-out infinite alternate;
    position: relative;
  }

  /* Premium Gradient Animation */
  @keyframes gradientSlide {
    0% {
      background-position: 0% 50%;
    }
    100% {
      background-position: 100% 50%;
    }
  }

  /* Scrolled state enhancement */
  .executive-nav.scrolled {
    background: linear-gradient(90deg, #ffffff 0%, #faedc6 50%, #ffffff 100%);
    background-size: 200% 200%;
    box-shadow: 0 4px 25px rgba(0, 0, 0, 0.08);
    backdrop-filter: blur(20px);
    -webkit-backdrop-filter: blur(20px);
    padding-top: 0.5rem;
    padding-bottom: 0.5rem;
  }

  .executive-nav.scrolled .flex {
    padding-top: 0.5rem;
    padding-bottom: 0.5rem;
  }

  /* Executive Navigation Link Styling */
  .nav-link {
    position: relative;
    font-family: 'Inter', sans-serif;
    font-weight: 500;
    letter-spacing: -0.01em;
  }

  .nav-link::after {
    content: '';
    position: absolute;
    width: 0;
    height: 1px;
    bottom: -2px;
    left: 50%;
    background-color: #C9A227;
    transition: all 0.3s ease-in-out;
    transform: translateX(-50%);
  }

  .nav-link:hover::after {
    width: 100%;
  }

  .nav-link:hover {
    transform: translateY(-1px);
  }

  /* Executive Mobile Navigation */
  .mobile-nav {
    visibility: hidden;
    transform: translateY(-12px) scale(0.95);
    opacity: 0;
    transition: all 0.3s cubic-bezier(0.4, 0.0, 0.2, 1);
    background: linear-gradient(135deg, #ffffff 0%, #faedc6 50%, #ffffff 100%);
    backdrop-filter: blur(16px);
    -webkit-backdrop-filter: blur(16px);
  }

  /* Mobile Navigation Open State */
  .mobile-nav.open {
    visibility: visible;
    transform: translateY(0) scale(1);
    opacity: 1;
    transition: all 0.3s cubic-bezier(0.4, 0.0, 0.2, 1);
  }

  /* Mobile Navigation Items Animation */
  .mobile-nav-item {
    opacity: 0;
    transform: translateY(20px);
    transition: all 0.3s ease-out;
  }

  .mobile-nav.open .mobile-nav-item {
    opacity: 1;
    transform: translateY(0);
  }

  /* Body Scroll Lock */
  body.mobile-menu-open {
    overflow: hidden;
    position: fixed;
    width: 100%;
  }

  /* Executive Hamburger Animation */
  .mobile-menu-button.open {
    border-color: #C9A227;
  }
  
  .mobile-menu-button.open .hamburger-line:nth-child(1) {
    transform: rotate(45deg) translate(5px, 5px);
    background-color: #C9A227;
  }

  .mobile-menu-button.open .hamburger-line:nth-child(2) {
    opacity: 0;
    transform: scale(0);
  }

  .mobile-menu-button.open .hamburger-line:nth-child(3) {
    transform: rotate(-45deg) translate(5px, -5px);
    background-color: #C9A227;
  }

  /* Hover effects for executive feel */
  .mobile-menu-button:hover {
    transform: translateY(-1px);
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    header {
      top: 2px;
      width: 98%;
    }
    
    .executive-nav {
      padding: 0.75rem 1rem;
    }
  }

  /* RTL Support */
  [dir="rtl"] .mobile-nav {
    left: 4px;
    right: 4px;
  }
  
  [dir="rtl"] .nav-link {
    text-align: right;
  }

  [dir="rtl"] .executive-nav {
    background: linear-gradient(-90deg, #ffffff 0%, #faedc6 50%, #ffffff 100%);
    background-size: 200% 200%;
  }
</style>

<script is:inline>
  (function() {
    // Prevent multiple initializations
    if (window.takaiLuxuryNav) return;
    window.takaiLuxuryNav = true;

    let isInitialized = false;
    let isMenuOpen = false;
    let retryCount = 0;
    const maxRetries = 10;

    // Cache DOM elements
    let mobileButton, mobileNav, mobileLinks;

    function handleScroll() {
      const navbar = document.getElementById('main-header');
      if (navbar) {
        const scrolled = window.scrollY > 50;
        navbar.classList.toggle('scrolled', scrolled);
      }
    }

    // Throttled scroll handler
    function throttleScroll() {
      let ticking = false;
      return () => {
        if (!ticking) {
          window.requestAnimationFrame(() => {
            handleScroll();
            ticking = false;
          });
          ticking = true;
        }
      }
    }

    const scrollHandler = throttleScroll();

    function tryInit() {
      // Initialize scroll handling first (independent)
      window.addEventListener('scroll', scrollHandler, { passive: true });
      handleScroll(); // Check initial scroll position
      
      // Initialize mobile navigation if not already
      if (!isInitialized) {
        initMobileNavigation();
      }
    }

    function initMobileNavigation() {
      if (isInitialized) return true;

      // Get DOM elements with precision
      mobileButton = document.getElementById('mobile-menu-button');
      mobileNav = document.getElementById('mobile-navigation');
      mobileLinks = document.querySelectorAll('.mobile-nav-link');

      // Check if essential elements exist
      if (!mobileButton || !mobileNav) {
        retryCount++;
        if (retryCount < maxRetries) {
          setTimeout(initMobileNavigation, 100 * retryCount);
          return false;
        }
        console.warn('TAKAI: Mobile navigation elements not found');
        return false;
      }

      isInitialized = true;

      // Event listeners with premium attention to detail
      mobileButton.addEventListener('click', toggleMobileMenu);
      
      // Handle navigation links with grace
      mobileLinks.forEach(link => {
        link.addEventListener('click', () => {
          // Elegant delay for smooth navigation
          setTimeout(closeMobileMenu, 100);
        });
      });

      // Keyboard event listeners
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && isMenuOpen) {
          closeMobileMenu();
        }
      });

      // Handle resize (auto-close on desktop)
      window.addEventListener('resize', () => {
        if (isMenuOpen && window.innerWidth >= 768) {
          closeMobileMenu();
        }
      });

      return true;
    }

    function openMobileMenu() {
      if (!mobileNav || !mobileButton) return;
      
      isMenuOpen = true;
      
      // Update ARIA attributes
      mobileButton.setAttribute('aria-expanded', 'true');
      mobileNav.setAttribute('aria-hidden', 'false');
      
      // Add classes for premium animations
      mobileButton.classList.add('open');
      mobileNav.classList.add('open');
      document.body.classList.add('mobile-menu-open');
      
      // Focus management with precision
      setTimeout(() => {
        const firstLink = mobileNav.querySelector('.mobile-nav-link');
        if (firstLink) firstLink.focus();
      }, 300); // Match animation duration
    }

    function closeMobileMenu() {
      if (!mobileNav || !mobileButton) return;
      
      isMenuOpen = false;
      
      // Update ARIA attributes
      mobileButton.setAttribute('aria-expanded', 'false');
      mobileNav.setAttribute('aria-hidden', 'true');
      
      // Remove classes for smooth collapse
      mobileButton.classList.remove('open');
      mobileNav.classList.remove('open');
      document.body.classList.remove('mobile-menu-open');
      
      // Return focus with elegance
      setTimeout(() => {
        mobileButton.focus();
      }, 100);
    }

    function toggleMobileMenu() {
      if (isMenuOpen) {
        closeMobileMenu();
      } else {
        openMobileMenu();
      }
    }

    // Multi-strategy initialization (reliable across page loads and navigation)
    // Strategy 1: DOM already loaded
    if (document.readyState !== 'loading') {
      setTimeout(tryInit, 50);
    }

    // Strategy 2: DOMContentLoaded
    document.addEventListener('DOMContentLoaded', () => {
      setTimeout(tryInit, 100);
    });

    // Strategy 3: Window load (most reliable for Astro)
    window.addEventListener('load', () => {
      setTimeout(tryInit, 150);
    });

    // Strategy 4: Astro page navigation
    document.addEventListener('astro:page-load', () => {
      isInitialized = false;
      retryCount = 0;
      setTimeout(tryInit, 100);
    });

    // Strategy 5: Fallback with Japanese patience
    setTimeout(tryInit, 500);
  })();
</script>